<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>plo_zombie_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialize Variables

//Physics
grav = 0.5;
h_speed = 0;
v_speed = 0;
jumpspeed = 8;
walkSpeedMult = 0.3;

//Conditionals
e_state = e_state.idle;
global.attacked = false;
global.zombie_count += 1;

//Combat Variables
attack_cd = 1;
attack_lim = 1;
z_health = 50;
chaseRange[0] = 5;
chaseRange[1] = 96;
chaseRange[2] = 128;

//Aimless Movement 
randomnessTimer = 2;
wanderChance = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Random Motion Timer
if (randomnessTimer &gt; 0) {
    randomnessTimer -= 1;
};
if (randomnessTimer = 0) {
    wanderChance = floor(random(2.9));
};
if (randomnessTimer &lt; 0) {
    randmoness_timer = 5;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy AI States

//**States**//
switch (e_state) {
    //Idle State
    case e_state.idle: {scr_eIdle(); break;};
    
    //Chase State
    case e_state.chase: {scr_eChase(); break;};
    
    //Pathing State
    case e_state.pathing: {scr_ePathing(); break;};
    
    //Pathing2 State
    case e_state.pathing2: {scr_ePathing2(); break;};
    
    //Damage State
    case e_state.damage: {scr_eDamage(); break;};
    
    //Attack State
    case e_state.attack: {scr_eAttack(); break;};

    //Dead State
    case e_state.dead: {scr_eDead(); break;};
    
    //Popping State
     case e_state.explode: {scr_eExplode(); break;};
    
    default: break;
    
};

//Jump 
if (e_state = e_state.pathing2 &amp;&amp; place_meeting(x, y+1, obj_trampoline)) {
    v_speed = -jumpspeed;
};

//You dead
if (z_health &lt;= 0) {
    e_state = e_state.explode;
};





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling

//Facing Right v Left
if (abs(h_speed) &gt; 0) {
    image_xscale = sign(h_speed);
};

//Idle
if (e_state = e_state.idle) {
    if (h_speed = 0) {
        image_speed = 0.05;
        sprite_index = plo_zombie_idle;
    };
    if (abs(h_speed) &gt; 0) {
        image_speed = 0.15;
        sprite_index = plo_zombie_walk;
    };
};

//Chase and Pathing
if (e_state = e_state.chase || e_state = e_state.pathing || e_state = e_state.pathing2) {
    image_speed = 0.15;
    sprite_index = plo_zombie_walk;
};

//Attack
if (e_state = e_state.attack) {
    image_speed = 0.20;
    sprite_index = spr_explo_zombie_attack;
};

//Damage
if (e_state = e_state.damage) {
    image_speed = 0.10;
    sprite_index = spr_zombie_dmg;
    image_xscale = -sign(obj_zombie.x - obj_player.x);
};

//Explosion
if (e_state = e_state.explode) {
    image_speed = 0.20;
    sprite_index = plo_zombie_die;
};

//Dead
if (e_state = e_state.dead) {
    image_speed = 0.15;
    sprite_index = spr_zombie_die;
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explosion Handling
if (e_state = e_state.explode &amp;&amp; image_index &gt; 4 &amp;&amp; place_meeting(x, y, obj_player) &amp;&amp; player_state != p_state.dodging) {
    player_state = p_state.damage;
    global.playerHealth -= 10;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = spr_explo_zombie_attack) {
    if (image_xscale &lt; 0) {
        instance_create(x - 20, y, obj_zAttack);
    };
    if (image_xscale &gt; 0) {
        instance_create(x - 10, y, obj_zAttack);
    };
    e_state = e_state.idle;
};

if (sprite_index = spr_zombie_dmg) {
    e_state = e_state.idle;
};

if (sprite_index = plo_zombie_die) {
    instance_create(x, y, plo_zombie_dead);
    instance_destroy();
};

if (sprite_index = plo_zombie_die) {
    e_state = e_state.dead;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
draw_self();
/*
draw_set_font(fnt_text);
draw_set_color(c_white);

if (e_state = e_state.idle) {
    draw_text(x, y, "I'm Idle.");    
}
else if (e_state = e_state.chase) {
    draw_text(x, y, "I'm Chasing.");
}
else if (e_state = e_state.pathing) {
    draw_text(x, y, "I'm Pathing.");
}
else if (e_state = e_state.pathing2) {
    draw_text(x, y, "Pathing2");
};
else if (e_state = e_state.attack) {
    draw_text(x, y, "I'm Attacking.");
}
else if (e_state = e_state.dead) {
    draw_text(x, y, "Dying...");
};

draw_text(x + 30, y - 30, z_health);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
