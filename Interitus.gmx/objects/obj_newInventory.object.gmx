<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_inventory</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Items
globalvar items;
//Template: Name, Desc, Type (Melee, Ranged, Consumable), Sprite, Durability, Damage

items[1, 0] = "Axe";
items[1, 1] = "Heavy melee weapon.#Deals moderate damage.#PRESS 1 OR 2 TO EQUIP";
items[1, 2] = 1;
items[1, 3] = spr_heavyAxe
items[1, 4] = 300
items[1, 5] = 40

items[2, 0] = "Plasma Cutter";
items[2, 1] = "Basic ranged weapon.#Deals moderate damage.#PRESS 1 OR 2 TO EQUIP"; 
items[2, 2] = 2;
items[2, 3] = spr_plasmaCut
items[2, 4] = 300
items[2, 5] = 30
 
items[3, 0] = "Pipe";
items[3, 1] = "Basic melee weapon.#Deals light damage.#PRESS 1 OR 2 TO EQUIP";
items[3, 2] = 1;
items[3, 3] = spr_pipe
items[3, 4] = 300
items[3, 5] = 20

items[4, 0] = "Hydraulic Hammer";
items[4, 1] = "Heavy melee weapon.#Deals high damage.#PRESS 1 OR 2 TO EQUIP";
items[4, 2] = 1;
items[4, 3] = spr_hydrauHamm
items[4, 4] = 300
items[4, 5] = 70

items[5, 0] = "MAG.cannon";
items[5, 1] = "Heavy ranged weapon.#Deals massive piercing damage.#PRESS 1 OR 2 TO EQUIP";
items[5, 2] = 2;
items[5, 3] = spr_magnetAccl
items[5, 4] = 300
items[5, 5] = 50

items[6, 0] = "Pulse Rifle";
items[6, 1] = "Fast ranged weapon.#Deals moderate damage.#PRESS 1 OR 2 TO EQUIP";
items[6, 2] = 2;
items[6, 3] = spr_pulseRifle
items[6, 4] = 300
items[6, 5] = 30

items[7, 0] = "Knife";
items[7, 1] = "Might just be a butter knife.#PRESS 1 OR 2 TO EQUIP";
items[7, 2] = 1;
items[7, 3] = spr_cuttingKnife
items[7, 4] = 300
items[7, 5] = 20

items[8, 0] = "Thermal Blade";
items[8, 1] = "Fast melee weapon.#Deals high damage.#PRESS 1 OR 2 TO EQUIP";
items[8, 2] = 2;
items[8, 3] = spr_thermBlade
items[8, 4] = 300
items[8, 5] = 50

items[9, 0] = "Energy Rod";
items[9, 1] = "Fast melee weapon.#Deals moderate damage.#PRESS 1 OR 2 TO EQUIP";
items[9, 2] = 1;
items[9, 3] = spr_energyRod
items[9, 4] = 300
items[9, 5] = 30

items[10, 0] = "Med-Pack";
items[10, 1] = "This all purpose med-pack#can heal most injuries.";
items[10, 2] = 3;
items[10, 3] = spr_med
items[10, 4] = 1
items[10, 5] = 50

items[11, 0] = "Food";
items[11, 1] = "You actually don't#know what it is.#But it tastes alright.";
items[11, 2] = 3;
items[11, 3] = spr_food
items[11, 4] = 1
items[11, 5] = 5
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
globalvar showInv;
showInv = false;
globalvar maxInvSlots; 
maxInvSlots = 10;
mainInventory = false
invSprite = noone
invSprite2 = noone
text = ""
text2 = ""
durable = ""
space = 24;
ipos = 1;
ipos2 = 1;
inventoryUpdate = false

//Unused
globalvar scrapCheck;
scrapCheck = false

//Setting up Inventory Array
for (i = 1; i &lt; maxInvSlots; i++) {
    global.inventory[i, 0] = "";
    global.inventory[i, 1] = 0;
    global.inventory[i, 2] = "";
    global.inventory[i, 3] = 0;
};


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load
    if (!inventoryUpdate) {
        scr_inventoryCheck();
        inventoryUpdate = true
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alternate Inventory

//Viewing Inv
if (keyboard_check_pressed(ord('I')) &amp;&amp; !pause &amp;&amp; !scrapCheck) {
    if (showInv == true) {
        showInv = false;
    };
    else if (showInv == false) {
        showInv = true;
    };
};

if (showInv == true) {
    visible = true;
} else {
    visible = false;
}

//Position and Size
x = view_xview + 160
y = view_yview + 90

//Image Speed
image_speed = 0;

if (instance_exists(obj_player)) {
    

    if (player_state = p_state.inventory &amp;&amp; !mainInventory) {
       
        //Moving side to side
        move = 0;
        move -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(ord("A")), mouse_wheel_up(), 0); 
        move += max(keyboard_check_pressed(vk_right), keyboard_check_pressed(ord("D")), mouse_wheel_down(), 0);
        if (move != 0) {    
            ipos2 += move;
            if (ipos2 &lt; 1) {ipos2 = array_height_2d(global.inventory) - 1;}
            if (ipos2 &gt; array_height_2d(global.inventory) - 1) {ipos2 = 1;}
        }
        //Selecting stuff
        var push2;
        push2 = max(keyboard_check_released(ord('1')), keyboard_check_released(ord('2')), 0);
        if (push2 == 1) {
            scr_inventory();
        };
        //Scrap Option
        instance_create(x - 100, y, obj_scrap)
        //Repair Option
        instance_create(x - 50, y, obj_repair)
        //Consume Option
        instance_create(x, y, obj_consume)
        
    } 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Inventory


if (instance_exists(obj_player)) {
if (player_state = p_state.inventory &amp;&amp; mainInventory) {
//Moving up and Down
move = 0;
move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), mouse_wheel_up(), 0); 
move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), mouse_wheel_down(), 0);
if (move != 0) {    
    ipos += move;
    if (ipos &lt; 1) {ipos = array_height_2d(global.inventory) - 1;}
    if (ipos &gt; array_height_2d(global.inventory) - 1) {ipos = 1;}
}

//Selecting stuff
var push;
push = max(keyboard_check_released(ord('1')), keyboard_check_released(ord('2')), 0);
if (push == 1) {
    scr_inventory();
};
    
/*var scrap;
scrap = max(keyboard_check_pressed(ord('3')), 0);
if (scrap == 1) {
    scrapCheck = true
} 
if (scrapCheck) {
    type = scr_itemType();
    
    if (type = 1 || type = 2) {
        if (keyboard_check_released(ord('Y')) || key_enter || key_jump) {
            global.inventory[ipos, 0] = ""
            global.metal += 500;
            scrapCheck = false
        }
        if (keyboard_check_released(ord('N')) || key_escape) {
            scrapCheck = false
        }
    }
}*/

if (instance_exists(obj_scrap)) {
    with (obj_scrap) instance_destroy();
}
if (instance_exists(obj_repair)) {
    with (obj_repair) instance_destroy();
}

};
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switching Inventories
if (player_state = p_state.inventory &amp;&amp; !pause &amp;&amp; !scrapCheck) {
    scr_getInput();
    /*if (key_right = 1) mainInventory = false;
    else if (key_left = 1) mainInventory = true;*/

    if (mainInventory) image_index = 0
    else image_index = 1 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
first = false

///The Visual Stuff
texture_set_interpolation(false);

//Font and Alignment
draw_set_halign(fa_left);
draw_set_font(fnt_text);
draw_set_color(c_white);

if (showInv = true) {
    if (mainInventory = true) {
        //Drawing the Menu Items
        for (i = 1; i &lt; array_height_2d(global.inventory); i++) {
            draw_text(x - (space * 5.3), y - 64 + (i * 0.6 * space), string(global.inventory[i, 0]));
        }
        for (i = 1; i &lt; array_height_2d(global.keyBinding); i++) {
            draw_text(x + (space * 1.7), y - 64 + (i * 0.5 * space), string(global.keyBinding[i, 0]));
        }
        draw_text(x + 55, y + 30, "Hunger: " + string(global.food));
        draw_text(x + 55, y + 40, "Ammo: " + string(global.ammo));
        draw_text(x + 55, y + 50, "Metal: " + string(global.metal));

        //The Cursor
        draw_sprite(spr_cursor, 1, x - 130, y - 65 + ipos * 0.6 * space);
        
        //Scrap Check
        if (scrapCheck) draw_sprite(spr_check, 0, obj_newInventory.x, obj_newInventory.y);
    
    } else {
        //Drawing the Menu Items
        for (i = 1; i &lt; array_height_2d(global.inventory); i++) {
            for (j = 1; j &lt; array_height_2d(global.items); j++) {
                if (global.inventory[i, 0] = global.items[j, 0] || global.inventory[i, 2] = global.items[j, 0]) {
                    invSprite = global.items[j, 3]
                }  
                if (global.inventory[ipos2, 0] = global.items[j, 0]) {
                    text = global.items[j, 0] + " " + string(global.inventory[ipos2, 1]) + "/" + string(global.items[j, 4])
                    text2 = global.items[j, 1]
                } else if (global.inventory[ipos2, 0] = "---") {
                    if (global.inventory[ipos2, 2] = global.items[j, 0]) {
                        text = global.items[j, 0] + " " + string(global.inventory[ipos2, 1]) + "/" + string(global.items[j, 4])
                        text2 = global.items[j, 1]
                    }
                } else if (global.inventory[ipos2, 0] = "") {
                    text = ""
                    text2 = ""
                }
            }   
                        
            //Background/Sprites
            draw_sprite_ext(spr_wall, 0, x - 120 + (i * space), y - 26, 0.7, 0.7, image_angle, c_white, 0.7); 
            if (global.inventory[i, 0] != "") {
                draw_sprite_ext(invSprite, 0, x - 120 + (i * space), y - 26, 0.7, 0.7, image_angle, image_blend, image_alpha)
            } 
        }
        
        draw_set_valign(fa_center)
        draw_set_halign(fa_center)
        draw_text(x, y - 50, text);
        draw_set_halign(fa_left);
        draw_text(x - 126, y + 40, text2);
        for (var a = 1; a &lt; maxInvSlots; a++) {
            if (global.inventory[a, 3] != 0) {                     
             draw_text(x - 116 + (a * space), y - 30, global.inventory[a, 3])
            }
        }
               
        //The Selector
        draw_sprite(spr_select, 0, x - 120 + (ipos2 * space), y - 26);
        
        //Resources
        draw_text(x + 55, y + 30, "Hunger: " + string(global.food));
        draw_text(x + 55, y + 40, "Ammo: " + string(global.ammo));
        draw_text(x + 55, y + 50, "Metal: " + string(global.metal));
    }

}

draw_set_halign(fa_center)
draw_set_valign(fa_center)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
