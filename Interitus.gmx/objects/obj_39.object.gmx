<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zombie_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialize Variables

//Physics
grav = 0.5;
h_speed = 0;
v_speed = 0;
jumpspeed = 8;

//Conditionals
state = e_state.idle;
global.attacked = false;
global.zombie_count += 1;

//Combat Variables
attack_cd = 1;
attack_lim = 1;
global.damage_dir = image_xscale;
z_health = 50;

//Aimless Movement 
randomness_timer = 2;
wander_chance = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown
state = e_state.chase;
attack_lim = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Countdown 
if (instance_exists(obj_zombie)) {
    if (randomness_timer &gt; 0) {
        randomness_timer -= 1;
    }
}
if (randomness_timer = 0) {
    wander_chance = floor(random(2.9));
}
if (randomness_timer &lt;= 0) {
    randomness_timer = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Behavior and Movement

switch (state) {
//Idle State
    case e_state.idle:
    {
        
        if (wander_chance = 0) {
            h_speed = 0;
        }
        if (wander_chance = 1) {
            h_speed = 0.2;
        }
        if (wander_chance = 2) {
            h_speed = -0.2;
        }
        
        if (y = obj_player.y &amp;&amp; global.playerHealth &gt; 0) {
            if (distance_to_object(obj_player) &lt;= 96 &amp;&amp; distance_to_object(obj_player) &gt; 5) {
                state = e_state.chase;
            }
        }
        
        if (global.pathing_activate = true &amp;&amp; y &lt; obj_player.y) {
                if (distance_to_object(obj_pathing) &lt; 96) {
                    if (y - obj_pathing.y &lt; 32) {
                        state = e_state.pathing;
                    }
                }   
        }
        if (z_health &lt;= 0) {
        state = e_state.dead;
    }
    break;
    }
        
//Chase State
    case e_state.chase:
    {
    
        dir = sign(obj_player.x - x);
        h_speed = dir * 0.5;
        
        if (distance_to_object(obj_player) &lt; 128) {
            if (y &gt; obj_player.y) {
                if (place_meeting(x,y+1,obj_wall))
                    {    
                        v_speed = -jumpspeed;
                    }
                }
            }
            
        if (place_meeting(x, y, obj_trampoline)) {
            if (place_meeting(x,y+1,obj_wall))
                { 
                    v_speed = -jumpspeed;
                }
        }
        
        if (distance_to_object(obj_player) &gt; 96) {
            state = e_state.idle;
        }   
        if (global.pathing_activate = true &amp;&amp; y &lt; obj_player.y &amp;&amp; distance_to_object(instance_nearest(x, y, obj_pathing)) &lt; 96) {
            state = e_state.pathing; 
        }
        if (distance_to_object(obj_player) &lt; 7 &amp;&amp; attack_lim = 1) {
            state = e_state.attack;
        };
        if (z_health &lt;= 0) {
        state = e_state.dead;
    }
    break; 
    }
    
//Pathing State  
    case e_state.pathing:
{
        
    dir2 = sign(obj_pathing.x - x);
    h_speed = dir2 * 0.5;
    
    
    if (y &gt;= obj_player.y || distance_to_object(obj_player) &gt; 96)
    {
        state = e_state.idle;
    }
    if (distance_to_object(obj_pathing) &gt; 96) {
        state = e_state.idle;
    }
    if (y - obj_pathing.y &gt; 32) {
        state = e_state.idle;
    }
    
    if (distance_to_object(obj_player) &lt; distance_to_object(obj_pathing) &amp;&amp; y = obj_player.y) {
        state = e_state.chase;
    }
    if (z_health &lt;= 0) {
        state = e_state.dead;
    }
    
    break;
}

//Attack State
case e_state.attack: {
    h_speed = 0;

    if (z_health &lt;= 0) {
        state = e_state.dead;
        
    }
    
}
//Dead State
case e_state.dead: {
    h_speed = 0;
    v_speed = 0;
    
} 

//Default
default: break;
}

//Leave Me Alone
if (global.playerHealth &lt;= 0) {
    state = e_state.idle;
};

//Gravity 
if (v_speed &lt; 10) v_speed += grav;

//Collision Handling
if (place_meeting(x+h_speed, y, obj_wall)) {
    while(!place_meeting(x+sign(h_speed), y, obj_wall)) {
        x += sign(h_speed);
    }
    h_speed = 0;
}
x += h_speed;

if (place_meeting(x, y+v_speed, obj_wall)) {
    while(!place_meeting(x, y+sign(v_speed), obj_wall)) {
        y += sign(v_speed);
    }
    v_speed = 0;
}
y += v_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations

if (h_speed = 0 &amp;&amp; state = e_state.idle) {
    sprite_index = spr_zombie_idle;
    image_speed = 0.05;
}
if (h_speed &lt; 0) {
    image_xscale = -1
    image_speed = 0.15;
    sprite_index = spr_zombie_walk
}
if (h_speed &gt; 0){
    image_xscale = 1
    image_speed = 0.15;
    sprite_index = spr_zombie_walk
}  
if (state = e_state.attack) {
    image_xscale = sign(obj_player.x - x);
    global.damage_dir = image_xscale;
    sprite_index = spr_zombie_attack;
    image_speed = 0.10;
}
if (z_health &lt;= 0) {
    h_speed = 0;
    v_speed = 0;
    sprite_index = spr_zombie_die;
    image_speed = 0.15;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking and Dying
if (z_health &gt; 0) {
    if (state = e_state.attack) {
        if (global.damage_dir &lt; 0) {
            instance_create(x - 20, y, obj_zAttack);
        };
        if (global.damage_dir &gt; 0) {
            instance_create(x + 5, y, obj_zAttack);
        };
    }
}

if (state = e_state.attack) {
    alarm[1] = 10;
    attack_lim = 0;
};

if (sprite_index = spr_zombie_die) {
   instance_create(x, y, obj_zombie_dead);
   instance_destroy();
};    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging
draw_self();

/*
draw_set_font(fnt_text);
draw_set_color(c_white);

if (state = e_state.idle) {
    draw_text(x, y, "I'm Idle.");    
}
else if (state = e_state.chase) {
    draw_text(x, y, "I'm Chasing.");
}
else if (state = e_state.pathing) {
    draw_text(x, y, "I'm Pathing.");
}
else if (state = e_state.attack) {
    draw_text(x, y, "I'm Attacking."); 
}

draw_text(x, y - 30, z_health);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
