<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>15</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>15</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>3</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Physics
grav = 0.5;
h_speed = 0;
v_speed = 0;
jumpSpeed = -5.5;
max_moveSpeed = 0.7;
soundplay = false;

//Conditionals
global.isDodging = false;
player_state = p_state.idle;
instance_create(x, y, obj_ledgegrab);
doubleTap = 0;
globalvar hotKey;
hotKey = 0;
meleeCheck = false;
globalvar inBase;
inBase = true;
spawn = false;
globalvar pause;
pause = false
startingItem = 0

//Player Variables
global.maxStamina = 150;
global.maxHealth = 200;
global.stamina = 150;
global.playerHealth = 200;
global.cooldown = false;
global.face = 1;
global.maxFood = 100;
global.food = 40;
global.ammo = 50;
global.metal = 50;
attack = 0;
instance_create(x, y, Camera_Control);

scr_saveCheck();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_state = p_state.respawn;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room = rm_map;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldowns
global.cooldown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player States
scr_getInput();

//Start with a Pipe
ini_open("playerData.ini")
    startingItem = ini_read_real("Player", "Starting Item", 0)
ini_close() 
    if (startingItem = 0) { 
            scr_itemPickup2(items[3, 0]);
            startingItem = 1 
    }
ini_open("playerData.ini")
    ini_write_real("Player", "Starting Item", 1)
ini_close()

//Escape &amp; Pause
if (key_escape = 1) {
    if (player_state = p_state.inventory) {
        if (!scrapCheck) {
            showInv = false; 
            player_state = p_state.idle;
        }        
    } else if (time &gt; 0 &amp;&amp; room = rm_map) {
        alarm[6] = 1;
    } else {
    with (obj_pause) {
        if (!pause) {
            pause = true
        } else {
            pause = false
        }
    }
    }
}

if (pause) {
    with (all) {
        h_speed = 0;
        v_speed = 0;
        image_speed = 0
    }  
    player_state = p_state.idle
    with (obj_zombieMaster) e_state = e_state.idle
}

//**States**//
switch (player_state) {

//Idle State
    case p_state.idle: {scr_idle(); break;}
    
//Walking State
    case p_state.walking: {scr_walking(); break;}
    
//Sprinting State
    case p_state.sprinting: {scr_sprinting(); break;}
    
//Dodging State
    case p_state.dodging: {scr_dodging(); break;}
   
//Damage State
    case p_state.damage: {scr_damage(); break;}

//Dead State
    case p_state.dead: {scr_dead(); break;}
    
//Inventory State
    case p_state.inventory: {scr_invOpen(); break;}
    
//Respawn State
    case p_state.respawn: {scr_respawn(); break;}
        
//Melee Attack State
    case p_state.meleeAttack: {scr_melee(); break;}
    
//Ranged Attack State
    case p_state.rangeAttack: {scr_range(); break;}
    
//Talking State
    case p_state.talking: {scr_talking(); break;}
    
    default: break;
};

//Jumping
if (key_jump = 1 &amp;&amp; place_meeting(x, y + 1, obj_wall)) {
    v_speed = jumpSpeed;
};

//Death Activation
if (global.playerHealth &lt;= 0) {
    player_state = p_state.dead;
};

//Inventory Activation
if (showInv = true) {
    player_state = p_state.inventory;
};

//Keep the Alarms Going
if (alarm[0] &lt; 15) {
    alarm[0]--;
};
if (alarm[0] &lt;= 0) {
    alarm[0] = 15
};
if (alarm[1] &lt; 15) {
    alarm[1]--;
};
if (alarm[1] &lt;= 0) {
    alarm[1] = 15
};
if (alarm[2] &lt; 10) {
    alarm[2]--;
};
if (alarm[2] &lt;= 0) {
    alarm[2] = 10
};

//Combos
if (alarm[0] &lt; 14 &amp;&amp; alarm[0] &gt; 0) {
    doubleTap = 1;
};
if (alarm[1] &lt; 14 &amp;&amp; alarm[1] &gt; 0) {
    doubleTap = 2;
};
if (player_state = p_state.meleeAttack &amp;&amp; !place_meeting(x, y, obj_barricade)) {
    h_speed = sign(mouse_x - obj_player.x) * 0.3;
};

/*Speed Burst TimeOuts
if (sprite_index = spr_player_pipe_attack_3 &amp;&amp; image_index = 5) {
    alarm[2]--;
};*/

//Pathing Activation
if (distance_to_object(instance_nearest(x, y, obj_pathing)) &lt; 64) {
    global.pathing_activate = true;
}
else {
    global.pathing_activate = false;
};

//Spit Collisions
if (place_meeting(x, y, obj_spit)) {
    h_speed = h_speed * 0.8;
}

//Map
if (key_tab = 1 &amp;&amp; time &gt; 0 &amp;&amp; !pause) {
    if (room != rm_map) {
        instance_create(x, y, obj_checkpoint);
        alarm[5] = 1;        
    } else {
        alarm[6] = 1;
    } 
} 

//Hunger 
if (global.food &lt;= 0) {
    player_state = p_state.dead;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling
scr_getInput();
globalvar itemReturn;
itemReturn = scr_itemCheck();

//Facing Right v Left
if (key_left = 1 &amp;&amp; player_state != p_state.ledging) {
    global.face = -1;
} else if (key_right = 1 &amp;&amp; player_state != p_state.ledging) {
    global.face = 1;
}
image_xscale = global.face;


//Idle
if (player_state = p_state.idle) {    
    if (itemReturn = "Pipe") {
        image_speed = 0.05;
        sprite_index = spr_player_pipe_idle;
        meleeCheck = 1;
    }
    else if (itemReturn = "Plasma Cutter") {
        image_speed = 0.05;
        sprite_index = spr_player_idle_plascut;
        meleeCheck = 2;
    }
    else if (itemReturn = "Axe") {
        image_speed = 0.05;
        sprite_index = spr_player_idle_axe;
         meleeCheck = 1;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        image_speed = 0.05; 
        sprite_index = spr_player_idle_hammer; 
        meleeCheck = 1;    
    }
    else if (itemReturn = "MAG.cannon") {
        image_speed = 0.05;
        sprite_index = ayer_idle_cannon;
        meleeCheck = 2;
    }
    else if (itemReturn = "Pulse Rifle") {
        image_speed = 0.05;
        sprite_index = spr_player_idle_rifle;
        meleeCheck = 2;
    }
    else if (itemReturn = "Knife") {
        image_speed = 0.05;
        sprite_index = spr_player_knife_idle;
        meleeCheck = 1;    
    }
    else if (itemReturn = "Thermal Blade") {
        image_speed = 0.05;
        sprite_index = spr_player_idle_blade; 
        meleeCheck = 1;
    }    
    else if (itemReturn = "Energy Rod") {
        image_speed = 0.05;
        sprite_index = spr_player_idle_rod;
        meleeCheck = 1;
    }
    else {
        image_speed = 0.05;
        sprite_index = spr_player_idle;
        meleeCheck = 1;
    }    
};
//Walking
if (player_state = p_state.walking) {    
    if (itemReturn = "Pipe") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_pipe;
         meleeCheck = 1;
    }
    else if (itemReturn = "Plasma Cutter") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_plascut;
        meleeCheck = 2;
    }
    else if (itemReturn = "Axe") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_axe;
         meleeCheck = 1;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        image_speed = 0.20; 
        sprite_index = spr_player_walk_hammer; 
        meleeCheck = 1;    
    }
    else if (itemReturn = "MAG.cannon") {
        image_speed = 0.20;
        sprite_index = ayer_walk_cannon;
        meleeCheck = 2;
    }
    else if (itemReturn = "Pulse Rifle") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_rifle;
        meleeCheck = 2;
    }
    else if (itemReturn = "Knife") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_knife;
        meleeCheck = 1;    
    }
    else if (itemReturn = "Thermal Blade") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_blade; 
        meleeCheck = 1;
    }
    else if (itemReturn = "Energy Rod") {
        image_speed = 0.20;
        sprite_index = spr_player_walk_rod;
        meleeCheck = 1;
    }
    else {
        image_speed = 0.20;
        sprite_index = spr_player_walk;
        meleeCheck = 1;
    }
};

//Sprinting
if (player_state = p_state.sprinting) {   
    if (itemReturn = "Pipe") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_pipe;
         meleeCheck = 1;
    }
    else if (itemReturn = "Plasma Cutter") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_plascut;
        meleeCheck = 2;
    }
    else if (itemReturn = "Axe") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_axe;
         meleeCheck = 1;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        image_speed = 0.15; 
        sprite_index = spr_player_sprint_hammer; 
        meleeCheck = 1;    
    }
    else if (itemReturn = "MAG.cannon") {
        image_speed = 0.15;
        sprite_index = ayer_sprint_cannon;
        meleeCheck = 2;
    }
    else if (itemReturn = "Pulse Rifle") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_rifle;
        meleeCheck = 2;
    }
    else if (itemReturn = "Knife") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_knife;
        meleeCheck = 1;    
    }
    else if (itemReturn = "Thermal Blade") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_blade; 
        meleeCheck = 1;
    }
    else if (itemReturn = "Energy Rod") {
        image_speed = 0.15;
        sprite_index = spr_player_sprint_rod;
        meleeCheck = 1;
    }
    else {
        image_speed = 0.15;
        sprite_index = spr_player_sprint;
        meleeCheck = 1;
    }
};

//Dodging
if (player_state = p_state.dodging) {    
    if (itemReturn = "Pipe") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_pipe;
        meleeCheck = 0;
    }
    else if (itemReturn = "Plasma Cutter") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_plascut;
        meleeCheck = 0;
    }
    else if (itemReturn = "Axe") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_axe;
        meleeCheck = 0;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        image_speed = 0.30; 
        sprite_index = spr_player_roll_hammer; 
        meleeCheck = 0;    
    }
    else if (itemReturn = "MAG.cannon") {
        image_speed = 0.30;
        sprite_index = ayer_roll_cannon;
        meleeCheck = 0;
    }
    else if (itemReturn = "Pulse Rifle") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_rifle;
        meleeCheck = 0;
    }
    else if (itemReturn = "Knife") {
        image_speed = 0.30;
        sprite_index = spr_player_roll;
        meleeCheck = 0;    
    }
    else if (itemReturn = "Thermal Blade") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_blade; 
        meleeCheck = 0;
    }
    else if (itemReturn = "Energy Rod") {
        image_speed = 0.30;
        sprite_index = spr_player_roll_rod;
        meleeCheck = 0;
    }
    else {
        image_speed = 0.30;
        sprite_index = spr_player_roll;
        meleeCheck = 0;
    }
};

//Ledging
if (player_state = p_state.ledging) {
    sprite_index = spr_player_hang;
    global.face = sign(instance_nearest(x, y, obj_ledge).x - x);
    meleeCheck = 0;
};

//Damage
if (player_state = p_state.damage) {
    image_speed = 0.10;
    sprite_index = spr_player_dmg;
    meleeCheck = 0;
};

//Dead 
if (player_state = p_state.dead) {
    image_speed = 0.30;
    sprite_index = spr_player_die;
    meleeCheck = 0;
};
if (room = rm_dead) {
    visible = false;
};

//Melee Attack
if (player_state = p_state.meleeAttack) {
    image_xscale = sign(mouse_x - obj_player.x);
    if (doubleTap = 0) {
        if (soundplay = false)
        {
        audio_play_sound(snd_melee1,1,false);
        soundplay = true
        }
        if (itemReturn = "Pipe") {
            sprite_index = spr_player_pipe_attack_1; 
             image_speed = 0.20;
        } else if (itemReturn = "Hydraulic Hammer") {
            sprite_index = spr_player_attack1_hammer;   
             image_speed = 0.15; 
        } else if (itemReturn = "Axe") {
            sprite_index = spr_player_attack1_axe;
             image_speed = 0.15;
        } else if (itemReturn = "Knife") {
            sprite_index = spr_player_knife_attack_1;
             image_speed = 0.25;
        } else if (itemReturn = "Thermal Blade") {
            sprite_index = spr_player_attack1_blade;
             image_speed = 0.20;
        } else if (itemReturn = "Energy Rod") {
            sprite_index = spr_player_attack1_rod;
            image_speed = 0.20;
        } else {
            sprite_index = spr_player_punch;
            image_speed = 0.20;
        }
    }
    if (doubleTap = 1) {
        if (soundplay = false)
        {
        audio_play_sound(snd_melee2,1,false);
        soundplay = true
        }
        if (itemReturn = "Pipe") {
            sprite_index = spr_player_pipe_attack_2;
             image_speed = 0.20;
        } else if (itemReturn = "Hydraulic Hammer") {
            sprite_index = spr_player_attack2_hammer;    
             image_speed = 0.15;
        } else if (itemReturn = "Axe") {
            sprite_index = spr_player_attack2_axe;
             image_speed = 0.15;
        } else if (itemReturn = "Knife") {
            sprite_index = spr_player_knife_attack_2;
             image_speed = 0.25;
        } else if (itemReturn = "Thermal Blade") {
            sprite_index = spr_player_attack2_blade;
             image_speed = 0.20;
        } else if (itemReturn = "Energy Rod") {
            sprite_index = spr_player_attack2_rod;
            image_speed = 0.20;
        } else {
            sprite_index = spr_player_punch;
            image_speed = 0.20;
        }
    }
    if (doubleTap = 2) {
          if (soundplay = false)
        {
        audio_play_sound(snd_melee3,1,false);
        soundplay = true
        }
        if (itemReturn = "Pipe") {
            sprite_index = spr_player_pipe_attack_3;
             image_speed = 0.20;
        } else if (itemReturn = "Hydraulic Hammer") {
            sprite_index = spr_player_attack3_hammer;
             image_speed = 0.15;    
        } else if (itemReturn = "Axe") {
            sprite_index = spr_player_attack3_axe;
             image_speed = 0.15;
        } else if (itemReturn = "Knife") {
            sprite_index = spr_player_knife_attack_3;
             image_speed = 0.25;
        } else if (itemReturn = "Thermal Blade") {
            sprite_index = spr_player_attack3_blade;
             image_speed = 0.20;
        } else if (itemReturn = "Energy Rod") {
            sprite_index = spr_player_attack3_rod;
            image_speed = 0.20;
        } else {
            sprite_index = spr_player_punch;
            image_speed = 0.20;
        }
    }
};

//Ranged Weapon State
if (player_state = p_state.rangeAttack) {
        sprite_index = spr_player_idle_aim_plascut;
        instance_create(x, y, obj_armAim);
};

//Inventory State
if (player_state = p_state.inventory) {
    image_speed = 0.1;
    sprite_index = spr_player_idle;
};

//Jumping Up
if (v_speed &lt; 0) {
    if (itemReturn = "Pipe") {
        sprite_index = spr_player_jump_pipe;
        meleeCheck = 0;
    }
    if (itemReturn = "Plasma Cutter") {
        sprite_index = spr_player_jump_plascut;
        meleeCheck = 0;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        sprite_index = spr_player_jump_hammer; 
        meleeCheck = 0;    
    }
    else if (itemReturn = "MAG.cannon") {
        sprite_index = ayer_jump_cannon;
        meleeCheck = 0;
    }
    else if (itemReturn = "Pulse Rifle") {
        sprite_index = spr_player_jump_rifle;
        meleeCheck = 0;
    }
    else if (itemReturn = "Knife") {
        sprite_index = spr_player_jump;
        meleeCheck = 0;    
    }
    else if (itemReturn = "Thermal Blade") {
        sprite_index = spr_player_jump_blade; 
        meleeCheck = 0;
    }
    else if (itemReturn = "Energy Rod") {
        sprite_index = spr_player_jump_rod;
        meleeCheck = 0;
    }
    else {
        sprite_index = spr_player_jump;
        meleeCheck = 0
    };
};

//Falling Down
if (v_speed &gt; 0 &amp;&amp; !place_meeting(x - sign(h_speed), y, obj_platform)) {
    if (itemReturn = "Pipe") {
        sprite_index = spr_player_fall_pipe;
        meleeCheck = 0;
    }
    else if (itemReturn = "Plasma Cutter") {
        sprite_index = spr_player_fall_plascut;
        meleeCheck = 0;
    }
    else if (itemReturn = "Axe") {
        sprite_index = spr_player_fall_axe;
        meleeCheck = 0;
    }
    else if (itemReturn = "Hydraulic Hammer") {
        sprite_index = spr_player_fall_hammer;
        meleeCheck = 0;
    }
    else if (itemReturn = "MAG.cannon") {
        sprite_index = ayer_fall_cannon;
        meleeCheck = 0;
    }
    else if (itemReturn = "Pulse Rifle") {
        sprite_index = spr_player_fall_rifle;
        meleeCheck = 0;
    }
    else if (itemReturn = "Knife") {
        sprite_index = spr_player_fall;
        meleeCheck = 0;    
    }
    else if (itemReturn = "Thermal Blade") {
        sprite_index = spr_player_fall_blade; 
        meleeCheck = 0;
    }
    else if (itemReturn = "Energy Rod") {
        sprite_index = spr_player_fall_rod;
        meleeCheck = 0;
    }
    else {
        sprite_index = spr_player_fall;
        meleeCheck = 0;
    }
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Special Collisions
if (place_meeting(x + h_speed, y, obj_semiWall))
{
    while(!place_meeting(x + sign(h_speed), y, obj_semiWall))
    {
        x += sign(h_speed);
    }
    h_speed = 0;
}
if (place_meeting(x, y + v_speed, obj_semiWall))
{
    while(!place_meeting(x, y + sign(v_speed), obj_semiWall))
    {
        y += sign(v_speed);
    }
    v_speed = 0;
}

//Collision with Platforms
if (place_meeting(x + sign(h_speed), y, obj_platform)) {
    y -= 1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zombie Barricade Detection
if (obj_player.x &gt; 416 &amp;&amp; obj_player.x &lt; 928) {
    inBase = true;
} else {
    inBase = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Visibility
if (room = rm_transition || room = rm_dead || room = rm_map) {
    visible = false;
} else {
    visible = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*anual Zombie Spawn
scr_spawn();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit States
if (player_state = p_state.dodging) {
    sprite_index = spr_player_stop;
    scr_save();
};

if (player_state = p_state.damage) {
    sprite_index = spr_player_stop;
    player_state = p_state.idle;
    scr_save();

};

if (player_state = p_state.sprinting &amp;&amp; h_speed &gt; 0 &amp;&amp; h_speed &lt; 0.2) {
    sprite_index = spr_player_stop;
    scr_save();
}

if (sprite_index = spr_player_die) {
    room_goto(rm_dead);
};

if (sprite_index = spr_player_pipe_attack_1 || sprite_index = spr_player_attack1_hammer || sprite_index = spr_player_attack1_axe || sprite_index = spr_player_knife_attack_1 || sprite_index = spr_player_attack1_blade || sprite_index = spr_player_attack1_rod || sprite_index = spr_player_punch) {
    alarm[0]--;
    player_state = p_state.idle;
    soundplay = false;
};
if (sprite_index = spr_player_pipe_attack_2 || sprite_index = spr_player_attack2_hammer || sprite_index = spr_player_attack2_axe || sprite_index = spr_player_knife_attack_2 || sprite_index = spr_player_attack2_blade || sprite_index = spr_player_attack2_rod || sprite_index = spr_player_punch) {
    alarm[0] = 15;
    alarm[1]--;
    player_state = p_state.idle;
    soundplay = false;
};
if (sprite_index = spr_player_pipe_attack_3 || sprite_index = spr_player_attack3_hammer || sprite_index = spr_player_attack3_axe || sprite_index = spr_player_knife_attack_3 || sprite_index = spr_player_attack3_blade || sprite_index = spr_player_attack3_rod || sprite_index = spr_player_punch) {
    alarm[1] = 15;
    player_state = p_state.idle;
    soundplay = false;
};



if (sprite_index = spr_player_stop) {
    player_state = p_state.idle;
};

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Testing
    draw_self();


draw_set_font(fnt_text);
draw_set_color(c_white);
/*
draw_text(x, y, itemReturn); 
draw_text(x + 30, y, mouse_right);
draw_text(x - 30, y, p_state.rangeAttack);


if (player_state = p_state.idle) {
    draw_text(x, y, "Idle.");
};
if (player_state = p_state.walking) {
    draw_text(x, y, "Walking.");
};
if (player_state = p_state.sprinting) {
    draw_text(x, y, "Sprinting");
};
if (player_state = p_state.dodging) {
    draw_text(x, y, "Dodging");
};
if (player_state = p_state.ledging) {
    draw_text(x, y, "Ledging");
};
if (player_state = p_state.damage) {
    draw_text(x, y, "OUCH!");
};
if (player_state = p_state.dead) {
    draw_text(x, y, "Dead.");
};
if (player_state = p_state.meleeAttack) {
    draw_text(x, y, "Melee.");
};
if (player_state = p_state.rangeAttack) {
    draw_text(x, y, "Range.");
};/*
if (player_state = p_state.talking) {
    draw_text(x, y, "Chatting.");
};


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_text);
draw_set_color(c_red);

if (itemReturn != "") {
for (var i = 1; i &lt; maxInvSlots; i++) {
    if (global.inventory[i, 0] = itemReturn) {
        if (global.inventory[i, 1] &lt;= 150) {
            draw_text(x, y - 20, "Repair Weapon")
        }
        i = maxInvSlots
    }
}
}

if (global.food &lt;= 20 )
    {
     draw_text(x, y - 40, "You are starving.")
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
