<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Physics
grav = 0.5;
h_speed = 0;
v_speed = 0;
jumpSpeed = -7;
max_moveSpeed = 0.7;

//Conditionals
isDodging = false;
invOpen = false;
hasGun = false;
player_state = p_state.idle;

//Player Variables
maxStamina = 100;
global.player_health = 500;
attack = 0;
instance_create(x, y, obj_ledgegrab);

//Player (Re)spawn
if (global.checkpoint_r == room) {
    x = global.checkpoint_x;
    y = global.checkpoint_y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Everything Goes

//Controls
key_right = keyboard_check(ord('D'));
key_left = keyboard_check(ord('A'));
key_down = keyboard_check(ord('S'));
key_up = keyboard_check(ord('W'));
key_jump = keyboard_check_pressed(vk_space);
key_escape = keyboard_check_pressed(vk_escape);
key_shift = keyboard_check(vk_shift);
key_alt = keyboard_check_pressed(vk_alt);
key_inventory = keyboard_check(ord('E'));

//Emergency Restart Button
if (key_escape = 1) {
    game_restart();
};

//*States*//
switch (player_state) {
    //Idle State
    case p_state.idle:
    {    
    //Reinitalize
    grav = 0.5;
    
    //Inertia
    if (h_speed &gt; 0) {
            h_speed-= 0.1;
        };
        if (h_speed &lt; 0) {
            h_speed+= 0.1;
        };
        if (h_speed = 0) {
            h_speed = 0;   
        };
            
     //Movement
    if (key_right = 1) {
        if (h_speed &lt; max_moveSpeed) {
                h_speed+= 0.1;
        };
    };
    if (key_left = 1) {
        if (h_speed &gt; -max_moveSpeed) {
            h_speed-= 0.1;
        };
    };
    
    //Jumping
    if (key_jump = 1) {
        if (place_meeting(x, y+1, obj_wall)) {
            v_speed = jumpSpeed;
        };
    };
    
    //Switch to Inventory
    if (key_inventory = 1) {
        player_state = p_state.inventory;
    };
    else {
        player_state = p_state.idle;
    };  
    
    //Switch to Walking
    if (abs(h_speed) &gt; 0) {
        player_state = p_state.walking;
    };   
    break;
    };
    
    
    //Walking State
    case p_state.walking: 
    {
    //Reinitalize
    isDodging = false;
    
    //MoveSpeed Cap Reset 
    if (h_speed &gt; max_moveSpeed) {
        h_speed-= 0.1;
    };
    if (h_speed &lt; -max_moveSpeed) {
        h_speed+= 0.1;
    };
    
    //Movement
    if (key_right = 1) {
        if (h_speed &lt; max_moveSpeed) {
                h_speed+= 0.1;
        };
    };
    if (key_left = 1) {
        if (h_speed &gt; -max_moveSpeed) {
            h_speed-= 0.1;
        };
    };
    
    //Jumping
    if (key_jump = 1) {
        if (place_meeting(x, y+1, obj_wall)) {
            v_speed = jumpSpeed;
        };
    };
        
    //Switch States
    if (key_shift = 1 &amp;&amp; abs(h_speed) &gt; 0 &amp;&amp; global.stamina &gt; 0) {
        player_state = p_state.sprinting;
    };
    if (key_right = 0 &amp;&amp; key_left = 0) {
        player_state = p_state.idle;
    };
    break;
    };
    
    
    //Sprinting State
    case p_state.sprinting: {
        //Stamina Bar Handling Outside Case States
        //MoveSpeed Cap Handling Also Outside Case States
        
        //Reinitalize
        isDodging = false;
        
        //MoveSpeed Cap Reset 
        if (h_speed &gt; max_moveSpeed) {
            h_speed-= 0.1;
        };
        if (h_speed &lt; -max_moveSpeed) {
            h_speed+= 0.1;
        };
        
        //Movement
        if (key_right = 1) {
            if (h_speed &lt; max_moveSpeed) {
                h_speed += 0.2;
            };
        };
        if (key_left = 1) {
            if (h_speed &gt; -max_moveSpeed) {
                h_speed -= 0.2;
            };
        };
    
        //Jumping
        if (key_jump = 1) {
            if (place_meeting(x, y+1, obj_wall)) {
                v_speed = jumpSpeed;
            };
        };
        
        //Dodging 
        if (key_alt = 1 &amp;&amp; abs(h_speed) &gt; 0 &amp;&amp; global.stamina &gt; 0) {
            player_state = p_state.dodging;
        };
        
        //Switch States
        if (global.stamina = 0) {
            player_state = p_state.idle;
        };
        if (key_right = 0 &amp;&amp; key_left = 0) {
            player_state = p_state.idle;
        };
        if (key_shift = 0 &amp;&amp; key_right = 1) {
                player_state = p_state.walking;
        };
        if (key_shift = 0 &amp;&amp; key_left = 1) {
            player_state = p_state.walking;
            
        };
        break;
    };
    
    
    //Dodge State
    case p_state.dodging: 
    {
    isDodging = true;
    
    break;
    };
    //Ledging State
    case p_state.ledging:
    {
    //Switch to Ledging State is in obj_ledgegrab    
    //Ledging is Handled Outside Case State
    
    };
    //Damage State
    case p_state.damage: 
    {
    //Switch to and Handling of Damage State is in obj_zAttack
    
    //Disable Movement
    if (key_right = 1 || key_left = 1) 
    {
        h_speed += 0;
    };
    if (key_jump = 1) {
        v_speed += 0;
    };
    break;
    };
    
    
    //Inventory State
    case p_state.inventory: {
        room_goto(rm_test);
    };
    
   default: break;
};

//Ledging Mechanic
if (player_state = p_state.ledging) {    
    //Leap Up
    if (key_up = 1)
    {   
        v_speed = jumpSpeed;
    };
    
    //Leap Down
    else if (key_down = 1)
    {
        v_speed = -jumpSpeed;
    };
    
    else {
        h_speed = 0;
        v_speed = 0;
        grav = 0;
    };
};

//MoveSpeed Cap Fluctuations
if (player_state = p_state.sprinting) {
    max_moveSpeed = 1.4;
};
else if (player_state = p_state.walking) {
    max_moveSpeed = 0.7;
};

//Stamina Bar Depletion
if (player_state = p_state.sprinting) {
    global.stamina -= 0.1;
};
if (player_state = p_state.dodging) {
    global.stamina -= 3;
};

//Stamina Bar Refill
if (key_shift = 0 &amp;&amp; key_alt = 0 &amp;&amp; global.stamina &lt; maxStamina) {
    global.stamina += 0.05;
};

//Pathing Activation
if (distance_to_object(instance_nearest(x, y, obj_pathing)) &lt; 64) {
    global.pathing_activate = true;
}
else if (distance_to_object(instance_nearest(x, y, obj_pathing)) &gt; 64) {
    global.pathing_activate = false;
};

//*Physics*//
//Gravity
if (v_speed &lt; 10) v_speed += grav;

//Horizontal Collision
if (place_meeting(x + h_speed, y, obj_wall))
{
    while(!place_meeting(x + sign(h_speed), y, obj_wall))
    {
        x += sign(h_speed);
    }
    h_speed = 0;
}
x += h_speed;

//Vertical Collision
if (place_meeting(x,y + v_speed,obj_wall))
{
    while(!place_meeting(x,y + sign(v_speed),obj_wall))
   {
        y += sign(v_speed);
    }
    v_speed = 0
}
y += v_speed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling
//Facing Right v Left
if (abs(h_speed) &gt; 0) {
    image_xscale = sign(h_speed);
};

//Idle
if (player_state = p_state.idle) {
    image_speed = 0.05;
    sprite_index = spr_player_idle;
};
//Walking
else if (player_state = p_state.walking) {
    image_speed = 0.20;
    sprite_index = spr_player_walk;
};
//Sprinting
else if (player_state = p_state.sprinting) {
    image_speed = 0.10;
    sprite_index = spr_player_sprint;
};

//Jumping
if (v_speed &lt; 0) {
    image_speed = 0.10;
    sprite_index = spr_player_jump;
};
//Falling
if (v_speed &gt; 0) {
    image_speed = 0.10;
    sprite_index = spr_player_fall;
};

//Ledging
if (player_state = p_state.ledging) {
    sprite_index = spr_player_hang;
};

//Dodging
if (player_state = p_state.dodging) {
    image_speed = 0.30;
    sprite_index = spr_player_roll;
};

//Damage
if (player_state = p_state.damage &amp;&amp; obj_zAttack.alarm[0] &gt; -1) {
    image_speed = 0.05;
    sprite_index = spr_player_dmg;
    image_xscale = -global.damage_dir;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = spr_player_roll) {
    player_state = p_state.idle;
};
if (sprite_index = spr_player_dmg) {
    player_state = p_state.idle;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_font(fnt_text);
draw_set_color(c_white);

if (player_state = p_state.idle) {
    draw_text(x, y, "I'm Idle.");    
};
if (player_state = p_state.inventory) {
    draw_text(x, y, "INERTIA!");
};
if (player_state = p_state.walking) {
    draw_text(x, y, "I'm Walking.");
}
if (player_state = p_state.sprinting) {
    draw_text(x, y, "I'm Sprinting!");
};
if (player_state = p_state.dodging) {
    draw_text(x, y, "I'm Dodging!");
};
if (player_state = p_state.damage) {
    draw_text(x, y, "Ouch!");
};
if (player_state = p_state.ledging) {
    draw_text(x, y, "I'm Ledging!");
};
if (player_state = p_state.inventory) {
    draw_text(x, y, "Inventory Open.");
};

draw_text(x, y + 30, max_moveSpeed);
draw_text(x + 30, y + 30, h_speed);
draw_text(x - 30, y + 30, key_inventory);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
