<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Physics
grav = 0.5;
h_speed = 0;
v_speed = 0;
jumpSpeed = -7;
max_moveSpeed = 0.7;

//Conditionals
global.isDodging = false;
hasGun = false;
player_state = p_state.idle;
instance_create(x, y, obj_ledgegrab);

//Player Variables
maxStamina = 100;
maxHealth = 500;
global.stamina = 100;
global.playerHealth = 500;
attack = 0;

//Player (Re)spawn
if (global.checkpoint_r == room) {
    x = global.checkpoint_x;
    y = global.checkpoint_y;
};


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player States
scr_getInput();

//Emergency Restart
if (key_escape = 1) {
    game_restart();
};

//**States**//
switch (player_state) {

//Idle State
    case p_state.idle: {scr_idle(); break;}
    
//Walking State
    case p_state.walking: {scr_walking(); break;}
    
//Sprinting State
    case p_state.sprinting: {scr_sprinting(); break;}
    
//Dodging State
    case p_state.dodging: {scr_dodging(); break;}

//Ledging State
    case p_state.ledging: {scr_ledging(); break;}
    
//Damage State
    case p_state.damage: {scr_damage(); break;}

//Dead State
    case p_state.dead: {scr_dead(); break;}
    
//Inventory State
    case p_state.inventory: {scr_inventory(); break;}
    
    default: break;
};

//Jumping
if (key_jump = 1 &amp;&amp; place_meeting(x, y + 1, obj_wall)) {
    v_speed = jumpSpeed;;
};

//Death Activation
if (global.playerHealth &lt;= 0) {
    player_state = p_state.dead;
};

//Inventory Activation
if (distance_to_object(obj_checkpoint) &lt; 32 &amp;&amp; global.checkpointActive = true) {
    if (key_inventory = 1) {
        player_state = p_state.inventory;
    };
};

//Pathing Activation
if (distance_to_object(instance_nearest(x, y, obj_pathing)) &lt; 64) {
    global.pathing_activate = true;
}
else if (distance_to_object(instance_nearest(x, y, obj_pathing)) &gt; 64) {
    global.pathing_activate = false;
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handling
//Facing Right v Left
if (abs(h_speed) &gt; 0) {
    image_xscale = sign(h_speed);
};

//Idle
if (player_state = p_state.idle) {
    image_speed = 0.05;
    sprite_index = spr_player_idle;
};
//Walking
if (player_state = p_state.walking) {
    image_speed = 0.20;
    sprite_index = spr_player_walk;
};

//Sprinting
if (player_state = p_state.sprinting) {
    image_speed = 0.10;
    sprite_index = spr_player_sprint;
};

//Dodging
if (player_state = p_state.dodging) {
    image_speed = 0.10;
    sprite_index = spr_player_roll;
};

//Ledging
if (player_state = p_state.ledging) {
    sprite_index = spr_player_hang;
    image_xscale = sign(instance_nearest(x, y, obj_ledge).x - x);
};

//Damage
if (player_state = p_state.damage) {
    sprite_index = spr_player_dmg;
    image_xscale = -global.damage_dir;
};

//Dead 
if (player_state = p_state.dead) {
    image_speed = 0.10;
    sprite_index = spr_player_die;
};

//Jumping Up
if (v_speed &lt; 0) {
    sprite_index = spr_player_jump;    
};

//Falling Down
if (v_speed &gt; 0) {
    sprite_index = spr_player_fall;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit States
if (player_state = p_state.dodging) {
    player_state = p_state.idle;
};

if (player_state = p_state.dead) {
    
    if (global.checkpoint_r != noone) {
        global.playerHealth = maxHealth;
        player_state = p_state.idle;
        room_goto(global.checkpoint_r);
        x = global.checkpoint_x;
        y = global.checkpoint_y;
    };
    else {
        room_goto(rm_dead);
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug Testing
draw_self();

draw_set_font(fnt_text);
draw_set_color(c_white);

if (player_state = p_state.idle) {
    draw_text(x, y, "Idle.");
};
if (player_state = p_state.walking) {
    draw_text(x, y, "Walking.");
};
if (player_state = p_state.sprinting) {
    draw_text(x, y, "Sprinting");
};
if (player_state = p_state.dodging) {
    draw_text(x, y, "Dodging");
};
if (player_state = p_state.ledging) {
    draw_text(x, y, "Ledging");
};
if (player_state = p_state.damage) {
    draw_text(x, y, "OUCH!");
};
if (player_state = p_state.dead) {
    draw_text(x, y, "Dead.");
};

draw_text(x, y + 30, global.checkpoint_r);
draw_text(x + 30, y - 30, global.checkpoint_x);
draw_text(x - 30, y - 30, global.checkpoint_y);
draw_text(x + 30, y + 30, player_state);
draw_text(x - 30, y + 30, global.playerHealth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
